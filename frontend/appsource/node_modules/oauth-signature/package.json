{
  "name": "oauth-signature",
  "description": "OAuth 1.0a signature generator",
  "version": "1.3.0",
  "author": {
    "name": "Marco Bettiolo",
    "email": "marco@bettiolo.it",
    "url": "https://github.com/bettiolo"
  },
  "homepage": "https://github.com/bettiolo/oauth-signature-js",
  "repository": {
    "type": "git",
    "url": "https://github.com/bettiolo/oauth-signature-js"
  },
  "bugs": {
    "url": "http://github.com/bettiolo/oauth-signature-js/issues"
  },
  "license": "BSD-3-Clause",
  "main": "src/app/oauth-signature",
  "scripts": {
    "prepublish": "grunt build",
    "test": "grunt build"
  },
  "engines": {
    "node": "*"
  },
  "keywords": [
    "oauth",
    "hmac-sha1"
  ],
  "devDependencies": {
    "chai": "~1.10.0",
    "grunt": "~0.4.5",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-concat": "~0.5.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-requirejs": "~0.4.4",
    "grunt-contrib-uglify": "~0.6.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-mocha-test": "~0.12.4",
    "mocha": "~2.0.1"
  },
  "volo": {
    "baseUrl": "src/lib",
    "dependencies": {
      "url.min": "github:websanova/js-url/v1.8.6#url.min.js",
      "cryptojs/hmac-sha1": "https://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha1.js",
      "cryptojs/enc-base64-min": "https://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js"
    }
  },
  "dependencies": {
    "crypto-js": "~3.1.2-5"
  },
  "readme": "# OAuth 1.0a signature generator for node and the browser \n### Compliant with [RFC 5843](http://tools.ietf.org/html/rfc5849) + [Errata ID 2550](http://www.rfc-editor.org/errata_search.php?rfc=5849) and [OAuth 1.0a](http://oauth.net/core/1.0a)\n\n[![Build Status](https://travis-ci.org/bettiolo/oauth-signature-js.png?branch=master)](https://travis-ci.org/bettiolo/oauth-signature-js)\n[![Bower version](https://badge.fury.io/bo/oauth-signature-js.svg)](http://badge.fury.io/bo/oauth-signature-js)\n[![NPM version](https://badge.fury.io/js/oauth-signature.png)](http://badge.fury.io/js/oauth-signature)\n[![Dependency Status](https://david-dm.org/bettiolo/oauth-signature-js.png?theme=shields.io)](https://david-dm.org/bettiolo/oauth-signature-js)\n\n## Installation\n\n#### Install with `npm`:\n\n```shell\nnpm install oauth-signature\n```\n\n#### Install with `bower`:\n\n```shell\nbower install oauth-signature\n```\n\nAdd a `<script>` to your `index.html`:\n\n```html\n<script src=\"/bower_components/oauth-signature/dist/oauth-signature.js\"></script>\n```\n\n## Usage\n\nTo generate the OAuth signature call the following method:\n\n```js\noauthSignature.generate(httpMethod, url, parameters, consumerSecret, tokenSecret, options)\n```\n- `tokenSecret` is optional\n- `options` is optional\n\nthe default `options` parameter is as follows\n```js\nvar options = {\n\tencodeSignature: true // will encode the signature following the RFC 3986 Spec by default\n}\n```\n\n## Example\n\nThe following is an example on how to generate the signature for the reference sample as defined in  \n - http://oauth.net/core/1.0a/#rfc.section.A.5.1 \n - http://oauth.net/core/1.0a/#rfc.section.A.5.2\n\n```js\nvar httpMethod = 'GET',\n\turl = 'http://photos.example.net/photos',\n\tparameters = {\n\t\toauth_consumer_key : 'dpf43f3p2l4k3l03',\n\t\toauth_token : 'nnch734d00sl2jdk',\n\t\toauth_nonce : 'kllo9940pd9333jh',\n\t\toauth_timestamp : '1191242096',\n\t\toauth_signature_method : 'HMAC-SHA1',\n\t\toauth_version : '1.0',\n\t\tfile : 'vacation.jpg',\n\t\tsize : 'original'\n\t},\n\tconsumerSecret = 'kd94hf93k423kf44',\n\ttokenSecret = 'pfkkdhi9sl3r4s00',\n\t// generates a RFC 3986 encoded, BASE64 encoded HMAC-SHA1 hash\n\tencodedSignature = oauthSignature.generate(httpMethod, url, parameters, consumerSecret, tokenSecret),\n\t// generates a BASE64 encode HMAC-SHA1 hash\n\tsignature = oauthSignature.generate(httpMethod, url, parameters, consumerSecret, tokenSecret,\n\t\t{ encodeSignature: false});\n```\n\nThe `encodedSignature` variable will contain the RFC 3986 encoded, BASE64 encoded HMAC-SHA1 hash, ready to be used as a query parameter in a request: `tR3%2BTy81lMeYAr%2FFid0kMTYa%2FWM%3D`.\n\nThe `signature` variable will contain the BASE64 HMAC-SHA1 hash, without encoding: `tR3+Ty81lMeYAr/Fid0kMTYa/WM=`.\n\n## Requesting a protected resource\n\nUse the generated signature to populate the `oauth_signature` parameter to sign a protected resource as per [RFC](http://oauth.net/core/1.0a/#rfc.section.A.5.3).\n\nExample GET request using query string parameters:\n\nhttp://photos.example.net/photos?file=vacation.jpg&size=original&oauth_consumer_key=dpf43f3p2l4k3l03&oauth_token=nnch734d00sl2jdk&oauth_signature_method=HMAC-SHA1&oauth_signature=tR3%2BTy81lMeYAr%2FFid0kMTYa%2FWM%3D&oauth_timestamp=1191242096&oauth_nonce=kllo9940pd9333jh&oauth_version=1.0\n\n## Advantages\n\nThis project has an extensive test coverage for all the corner cases present in the OAuth specifications ([RFC 5843](http://tools.ietf.org/html/rfc5849) + [Errata ID 2550](http://www.rfc-editor.org/errata_search.php?rfc=5849) and [OAuth.net community version](http://oauth.net/core/1.0a))\n\nTake a look at the test file [src/app/signature.tests.js](src/app/oauth-signature.tests.js)\n\n## How do I run tests?\n\nThe tests can be executed in your browser or in node\n\n### Browser\n\nOpen the file [src/test-runner.html](src/test-runner.html) in your browser\n\nYou can also run them live: [src/test-runner.html](https://bettiolo.github.io/oauth-signature-js/src/test-runner.html)\n\n### Node\n\nExecute `npm test` in the console\n\n### Live example\n\nIf you want to make a working experiment you can use the live version of the OAuth signature page at this url: http://bettiolo.github.io/oauth-reference-page/\n\nAnd you can hit the echo OAuth endpoints at this url: http://echo.lab.madgex.com/\n\n- url: **http://echo.lab.madgex.com/echo.ashx**\n- consumer key: **key**\n- consumer secret: **secret**\n- token: **accesskey**\n- token secret: **accesssecret**\n- nonce: **IMPORTANT!** generate a new one at EACH request otherwise you will get a 400 Bad Request\n- timestamp: **IMPORTANT!** refresh the timestamp before each call\n- fields: **add a field with name `foo` and value `bar`**\n\nA url similar to this one will be generated: `http://echo.lab.madgex.com/echo.ashx?foo=bar&oauth_consumer_key=key&oauth_nonce=643377115&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1410807318&oauth_token=accesskey&oauth_version=1.0&oauth_signature=zCmKoF9rVlNxAkD8wUCizFUajs4%3D`\n\nClick on the generated link on the right hand side and you will see the echo server returning `foo=bar`\n",
  "readmeFilename": "README.md",
  "_id": "oauth-signature@1.3.0",
  "dist": {
    "shasum": "a38887ee8eca691b5d21e37da60309e30236dc77"
  },
  "_from": "oauth-signature@~1.3.0",
  "_resolved": "https://registry.npmjs.org/oauth-signature/-/oauth-signature-1.3.0.tgz"
}
